{"desc":	 	"#text$220$140$This is your personal note in cyber security. It was made and continuously improved, back to the day when you were a university student. It's a nice practice to frequently refer to it whenever you have forgotten something. #image$530$430$hackerWithTitleNotes$440$220",
"acts":
{
	"offDesc":	"Offensive acts are performed by the intruder. Many of them target the victim host. The intruder will get more resource as bounty as much as the damage dealt to the assets. There are four categories of attacks: \n1. Those marked with \"Finishing move\" deal great damage to the assets. However, in the majority of cases, an intruder will only successfully launch these attacks once each round. Moreover, these attacks are usually preceded with attacks of the next category, otherwise, it may fail. \n2. Those attacks without any mark in the act description deal little or no damage to the assets. However, they are important methods to break the defense or to prepare for the final \"Finishing move\". ^3. Those attacks marked with \"DoS category\" belong to DoS attacks. They enforce pressure to the victim's server, so that the rival may have a problem with resource income in the next round. \n4. Those marked with \"Improvement\" strengthen the intruder. Some of these reinforcements can be performed only once, some other multiple times. \nIn one round, an intruder usually launches one \"Finishing move\", preceded by a certain number of category 2 attacks, and optionally \"DoS category\" or \"Improvement\". \nSome defenses can be overridden by attacks of category 2, but some cannot. In face of these defenses, the intruder should turn to other vulnerabilities.",
	"offensive":
	[
		{
			"name":	"ARP cache poisoning",
			"desc":	"#image$600$200$arpSpoofingNotes$400$330#image$510$450$arpCachePoisoningNotes^ARP cache poisoning, together with ARP spoofing, ARP poison routing, is an offensive technique in a LAN (Local Area Network) that the attacker sends spoofed ARP message, to fool the victim(s) of his IP address. The target victim(s) then take the attacker's IP address to belong to, for example, the default gateway. As a result, a large number of messages are sent to the attacker instead of the real designated host, opening the door for MITM (Man-In-The-Middle) attack, session hijacking or denial of service attack. Being based on ARP protocol, this attack totally cannot be used outside the same Local Area Network. \n\nSome defensive techniques are there against ARP cache poisoning: ^One possibility is to manually set the ARP entries statically, and instruct the machine to totally ignore any ARP replies. This method does not scale to large networks, however, as the manual configuration of all the possible combination of connections has n-square complexity. \nThe other defensive technique is the use of ARP firewall. It addresses the problem that ARP reply is not authenticated, and make the use of cross-checking or certification of some kind to detect spoofed ARP messages. \nOperating system can provide some defenses against ARP poisoning. e.g. ignoring ARP replies if it's not preceded by ARP request from the host or if the ARP entry in the machine has not expired.",
			"sees":	["ARP firewall"],
			"url1": "https://en.wikipedia.org/wiki/ARP_spoofing"
		},
		{
			"name":	"Bombe",
			"desc":	"#image$800$260$bombeNotes#text$220$290$Bombe is a British electro-mechanical device built during the World War II to decrypt messages encrypted by German Enigma enciphering machine. Bombe was designed by Alan Turing at 1939, and improved by Gordon Welchman in 1940. Nevertheless, Turing's bombe is still based on the work of Polish cryptologist Marian Rejewski, which is called \"bomba\" instead. Bombe was used to crack the daily setting of the Enigma encipher machine, granting the Allies super knowledge over the German movements.$520",
			"sees":	["Encrypt with Enigma", "Gordon's improvement"],
			"url1":	"https://en.wikipedia.org/wiki/Bombe",
			"url2": "https://en.wikipedia.org/wiki/The_Imitation_Game"
		},
		{
			"name":	"Brute-force attack",
			"desc":	"Brute-force attack is a traditional cryptanalytic attack to try out all the possible passwords or passphrases exhaustively in hope of getting the right one. A long password would increase the possible combinations quadratically, and increase the difficulty of brute-force attack accordingly. ^The length of an encryption key is primarily evaluated as the time needed to perform a brute-force attack and crack the key. While this evaluation gives some information in theory, in real cases, shortcuts in cryptanalysis are usually found, allowing more efficient attacks, making the time needed to be much shorter than that of a brute-force attack. ^The most basic counter measure against brute-force attack is the use longer password or passphrases. But the administrator of online services can also take measures to hamper exhaustive trial. For example, one can limit the number of trials of login attempt, enforce delay after each unsuccessful trial, or increase complexity for each trial (e.g. requiring CAPTCHA verification).",
			"sees": ["Dictionary attack", "Password error limit", "Password error delay", "Password Hashed"],
			"url1":	"https://en.wikipedia.org/wiki/Brute-force_attack"
		},
		{
			"name":	"Botnet machines",
			"desc":	"Crackers cracks other's computers and gains control over the computers. These computers are then called zombie computers, as they will act according to the cracker's remote control, while the real owners are still unaware. A distributed Denial-of-service attack is based on synchronized attacks of multiple computers. Therefore, the number of computers under the control of the attacker makes a great difference. See this need, the crackers over the Internet will actively crack more computers, inserting bots, and sell the control of these machines to those who prepare for DDoS or spammers.",
			"sees":	["DDoS", "Spam email"],
			"url1":	"https://en.wikipedia.org/wiki/Botnet"
		},
		{
			"name":	"Chosen-plaintext attack",
			"desc":	"Chosen-plaintext attack (CPA) is an attack model for cryptanalysis where the attacker can obtain the cipher text of an arbitrary plaintext. With this attack, more information of the encryption is collected, so that cryptanalysis becomes easier, and the secret key can be cracked quicker. \nThe chosen-plaintext attack is related to the known-plaintext attack, but is more powerful. This is because the attacker can choose the specific plaintext pattern as he wants. The chosen pattern could have some specific property that degenerates the encryption, revealing some clues to the secret key. ^During the World War 2, USA Navy has used chosen-plaintext attack on Japan, achieving a great strategic victory in the battle in Pacific. Similarly, UK code breakers at Bletchley Park also have used chosen-plaintext attack on its rival German, accelerating the process of cracking on Enigma, the German \"unbreakable\" encryption machine. ^The construction of Model ciphers pursues semantic security, which makes the knowledge of the plaintext add only negligible information, as compared to only the knowledge of a ciphertext is present. \nExcept for known-plaintext attack and chosen-plaintext attack, there are also known-ciphertext attak and chosen-ciphertext attack.",
			"sees":	["Known-plaintext attack"],
			"url1":	"https://en.wikipedia.org/wiki/Chosen-plaintext_attack"
		},
		{
			"name":	"CSRF",
			"desc":	"Cross-site Request Forgery, one-click attack or session riding is an attack approach to \"forge\" requests from the client trusted by the web server. This can be obtained by crafted image tags, invisible forms or some Javascript request. While XSS (Cross-site scripting), which exploits user's trust for the website, CSRF exploits server's trust on the client's browser. ^Though not many, there are already some technical methods to fight against cross-site request forgery. But the users can also do something to reduce the likelihood of attacks: \n1. Avoid opening any casual links sent from unauthorized person. These links are one of the major ways how CSRF distributes. \n2. Log off important accounts or at least use a different browser when opening any suspicious link.",
			"sees":	["XSS", "Tip:open no unauthorized link"],
			"url1": "https://en.wikipedia.org/wiki/Cross-site_request_forgery"
		},
		{
			"name":	"Dictionary attack",
			"desc":	"Dictionary attack is an improved version of brute-force attack. It does not try all the possible character combinations, but only those more likely combinations, e.g. words from a dictionary. ^When used to against the hashes of the passwords, pre-computed dictionary attack is more often used. The attacker firstly prepares a huge table of all the mappings between the original texts and its hashed values. Although the preparation time is prolonged, the actual time needed for the attack is greatly shortened. Pre-computed dictionary attack is more effective when cracking a large number of hashes, in the sense that the pre-computed table can be reused. \nThere is also an improved table of the mappings called rainbow table, which trades between storage space and searching speed. ^Dictionary attack prevails because of the human tendency to choose only meaningful passwords (or just simple variations from the meaningful ones). As a consequence, choosing a password which seems not having any meaning will greatly frustrate dictionary attacks. A password mixing uppercase, lowercase letters, numbers or punctuations is more resistive to dictionary attack. \nPassphrase features meaninglessness (and length) and it is a good alternative for password. \nAdding salt (a nonce) to the password before hashing is also an excellent way against dictionary attack, for the fact that the attacker has to create a table for each salt, which, for long salt, becomes impossible.",
			"sees": ["Rainbow table", "Salt", "Password Hashed"],
			"url1":	"https://en.wikipedia.org/wiki/Dictionary_attack"
		},
		{
			"name":	"DDoS",
			"desc":	"#image$800$260$ddosNotes#text$220$250$DDoS (Distributed Denial of Service) attack is an improved version of Denial of Service attack, in the sense that, it exploit multiple  computers to organize an collective attack. Fairly synchronized at the attack time, the target host is nearly immediately paralyzed by the flood of requests. The strength of the attack can be improved by more botnet machines.$520",
			"sees":	["DoS", "Botnet machines", "Spam email", "CDN", "CAPTCHA"],
			"url1": "https://en.wikipedia.org/wiki/Denial-of-service_attack"
		},
		{
			"name":	"Deauth attack",
			"desc":	"Wi-fi Deauth attack is a denial-of-service attack performed between the victim and the wireless access point. Even though the normal data sent through the wireless network can be encrypted, based on the wireless protocols, the authentication and deauthentication frames are totally in clear text. As a result, the attacker only needs to sniff some traffic in the network, obtaining the MAC address of the victim, before he sends the deauth message in place of the victim. With that, the victim is immediately kicked offline. ^This is useful when a public Wi-Fi is fully loaded with users, where kicking some authenticated users offline makes space for other users to obtain Internet access. The attacker may also constantly send deauth attack for the purpose of a denial-of-service attack, so that the victim can get no Internet access. \nNevertheless, deauth attack is more often used for more evil purposes. The attackers use deauth attack to disconnect the users from the original Wi-Fi access point, so that the victim may actually be connected to the attacker's rogue access point. Being a fake access point managed by the attacker, the rogue access point is the first step towards Man-In-The-Middle attack. ^The attack can also use deauth attack to enforce users to reconnect, so that the WPA 4-way handshake can be sniffed. With this knowledge, the attacker can launch an attack on WPA password. \nThe deauthentication message frame is not in a way encrypted or authenticated. Therefore, no counter measure yet is there to fight the Wi-fi deauth attack.",
			"sees":	["Rogue access point"],
			"url1":	"https://en.wikipedia.org/wiki/Wi-Fi_deauthentication_attack"
		},
		{
			"name":	"DNS cache poisoning",
			"desc":	"DNS cache poisoning or DNS spoofing, is one form of hacking by sending corrupted data into the server(s) of the Domain Name System. With this, the (legitimate) DNS servers will return incorrect result at future Domain name-IP conversion for their clients, resulting in the client's traffic to be adversely diverted, for example, to hacker-controlled devices. ^DNS was used to provide flexibility of converting from domain name to IP address on site, without forcing the client to store the mapping between all possible domain names and IPs, and with the convenience to decouple the domain name with IP address (so that the mapping can be updated easily). Nevertheless, malfunctioning DNS server or even a rogue DNS server could distribute wrong result, which fools the clients, and even other DNS servers. For better performance, each DNS server caches a certain number of mappings for a certain amount of time. If a new mapping is detected, the old one is replaced by the new one. ^DNS cache poisoning exploits this functionality. The attacker spread out wrong mappings, to \"poison\" the cache of DNS servers of a region. The DNS server will take the mapping as truth and respond to client DNS request using this mapping, until the mapping expires or new mapping with the same domain name and a different IP address arrives.",
			"sees":	["DNSSEC", "Rogue DNS server"],
			"url1":	"https://en.wikipedia.org/wiki/DNS_spoofing"
		},
		{
			"name":	"DoS",
			"desc":	"DoS (Denial of Service) is a term for a collection of attacks that try to exhaust all the computational and operational power or other resources of the target server. By doing this, the target is busy with countless requests, and can spare little or even no effort for normal service. It's one of the most popular forms of attack, in the sense that its defensive effort can only relieve its effect, but without totally eliminating it. Nevertheless, a traditional DoS attack is usually not really effective, in the sense that the attacker competes with the target in computational power. ^Without a much more powerful computer to be used for the attack, the target host may not be occupied enough to go to a halt. The more realistic approach is DDoS (Distributed Denial of Service) attack. \nIt should be noted that, there are different kinds of DoS attack. Except for the application DoS attack which aims at the target service, other layers of the OSI model can be attacked too. Accordingly, the defensive approaches for DoS attack vary as the attack method differs.",
			"sees":	["DDoS", "CDN", "CAPTCHA"],
			"url1": "https://en.wikipedia.org/wiki/Denial-of-service_attack"
		},
		
		{
			"name":	"Gordon's improvement",
			"desc":	"#image$800$260$GordonNotes$240$350#text$220$250$Gordon Welchman was an English mathematician, professor, codebreaker and author. He exploited the reciprocity in the connection of the plugboard, reducing a considerable number of possible settings of the Enigma settings. The adding is called as a diagonal board, which greatly improved Bombe's capability to break Enigma machine.$540",
			"sees":	["Encrypt with Enigma", "Bombe"],
			"url1":	"https://en.wikipedia.org/wiki/Gordon_Welchman"
		},
		{
			"name":	"IP spoofing",
			"desc":	"IP spoofing or IP address spoofing is the behavior of creating IP packages with a force source address. By doing this, the attacker can impersonate others or hide its only identity. IP spoofing is extremely easy, and it has been a commonly used together with many other attacks, so that the administrator will find difficulty tracing detecting the attacker. IP spoofing can easily fool those services use IP address for authentication (therefore, there are little services left still using this kind of authentication). ^One of the techniques to defend IP spoofing is the use of packet filters. Ingress filters drop IP packets coming from its outer interface but with inner source addresses; egress filters drop IP packets coming from its inner interface but with outer source address. However, they are not able to detect attackers from the outside of the network, trying to spoof IP addresses outside, or attackers inside the network, trying to spoof IP addresses inside. \nThe upper layers can also provide some defenses against IP spoofing.",
			"url1": "https://en.wikipedia.org/wiki/IP_address_spoofing"
		},
		{
			"name":	"Known-plaintext attack",
			"desc":	"Known-plaintext attack is an attack model for cryptanalysis where the attacker has both the ciphertext and its corresponding plaintext. The attacker targets not this particular plaintext of course. Whereas, through the plaintext and the corresponding ciphertext in hand, the attacker can find clues related to the secret key used for the encryption. \nDuring the World War 2, code breakers at Bletchley Park used known-plaintext attack to crack the German encryption machine Enigma. Words like Wetter (German for \"weather\") appear at the same location of every military report, \"Heil Hitler\" appears at the end of messages and \"Nothing to report\" is constantly sent. Bletchley Park called these guessed parts in the plaintext as \"crib\". ^The construction of Model ciphers pursues semantic security, which makes the knowledge of the plaintext add only negligible information, as compared to only the knowledge of a ciphertext is present. \nTerms related to Known-plaintext attack includes chosen-plaintext attack, as well as known-ciphertext attack and chosen-ciphertext attack",
			"sees":	["Chosen-plaintext attack"],
			"url1":	"https://en.wikipedia.org/wiki/Known-plaintext_attack"
		},
		{
			"name":	"MITM",
			"desc": "#image$510$500$mitmNotes#text$220$260$Man-In-The-Middle attack is a collection of attacks, where the attacker secretly inserts himself/herself between two parties, forwarding their messages, reading and possibly manipulating the messages, with the two parties unaware, thinking they were communicating directly. With MITM attack, all the messages exchanged between the two parties are accessible to the attacker, and if unencrypted, every secret is revealed to the attacker. What's more, the attacker can alter the messages as he/she wants, while the two parties, if without no authentication mechanism, are never aware. \nSome protocols like DH (Diffie-Hellman key exchange) can be easily fooled by MITM. ^Encryption is the way against sniffing attack following MITM (but be aware, DH itself will be compromised by MITM). All kinds of authentication will guarantee the attacker's manipulation will be detected. Transmission latency also gives some clues to the possibility of MITM attack. There are also other ways, each targeting each specific kind of MITM attack, based on the principles and properties of each attack.",
			"sees":	["DH", "Sniffing attack", "Replay attack"],
			"url1":	"https://en.wikipedia.org/wiki/Man-in-the-middle_attack"
		},
		{
			"name":	"Password DoS",
			"desc":	"When there is a limit on how many failed attempts are allowed before the account is locked down. The attacker can deliberately insert wrong password with the designated username, so that when the real user comes, the account has become inaccessible. This is an effect of denial-of-service.",
			"sees":	["Password error limit"]
		},
		{
			"name":	"Phishing",
			"desc":	"#image$520$280$phishingNotes$500$400^Phishing is a fraudulent behavior of disguising as a trustworthy entity in an electronic communication, obtaining sensitive data like usernames, passwords, credit card numbers. The word is a homophone of fishing, in the sense that both the two words indicate the use of bait to lure its victim. According to BakerHostetler's 2018 report, 34% of the security incident starts with phishing. \nPhishing is usually distributed through email spoofing or instant messages. These emails and messages could contain links that are used for CSRF attack. But more often, links in these emails and messages points to shadow servers, which look and feel like the legitimate one, but are under the control of the attackers. The linked websites may also distribute malware. ^Phishing is an important part in social engineering, where the attacker targets the human factor, rather than the technical vulnerability. As a result, the most significant way to thwart phishing is to use training other media to raise people's security awareness and their ability to recognize phishing. ^There are also improved versions of phishing, like spearphishing or whaling",
			"sees":	["Spear phishing", "Whaling", "Shadow sever"],
			"url1":	"https://en.wikipedia.org/wiki/Phishing"
		},
		{
			"name":	"Privilege escalation",
			"desc": "Privilege escalation is an act to exploit a vulnerability in an OS or application to gain elevated access to the resources that are usually restricted to authorized persons only. \nMost of the computer systems accept multiple user accounts, each of the users is not supposed to have the same privilege though. High privilege users like Administrator can do nearly any operations to the system and disk, including deletion or formatting, while low privilege users like guest user can only perform a limited amount of operations. \nBy privilege escalation, an attacker obtained a higher privilege, and deals much greater damage to the system. e.g. copy restricted data, format the disk or manipulate crucial drivers.",
			"sees":	["Credential compromised"],
			"url1": "https://en.wikipedia.org/wiki/Privilege_escalation"
		},
		{
			"name":	"Promiscuous mode",
			"desc":	"Promiscuous mode is a mode for the computer's wired or wireless NIC (Network Interface Controler), where the controller passes all traffic to the CPU, rather than only those that target this computer. This mode is usually used for packet sniffing in the network, whether for good (e.g. network diagnose) or evil (e.g. obtaining sensitive data) purposes. \nIn an Ethernet, the devices share a common channel, and the frames from and to any hosts in the networks go all around. The NIC was instructed to capture only those Ethernet frames that target the MAC address of the NIC, or the Ethernet frame in broadcast mode. Nevertheless, the NIC can be configured also to capture any the frames that have reached this device. ^This can be a blessing that the network administrator can obtain a good map of the network traffic. Whereas, this can be also a problem that someone with evil intent can spy on the communication of others. This action of illegally and secretly reading other's communication is called sniffing attack.",
			"sees":	["Sniffing attack"],
			"url1":	"https://en.wikipedia.org/wiki/Promiscuous_mode"
		},
		{
			"name":	"Quantum computing",
			"desc":	"Quantum computing is to compute using the properties of quantum-mechanical phenomena, and a quantum computer does this computing. A quantum computer is expected to have a great computational potential. Many of the current public key cryptographic systems are based on the computational infeasibility of integer factorization for large integers. But with the computational power of a quantum computer, large integer factorization can be done using Shor's algorithm in polynomial time. This mean, a quantum computer can break many of the current cryptographic systems. ^There are still some other cryptographic algorithms which do not rely on integer factorization or discrete logarithm problems, which can still stand quantum computing. The study of these algorithms is called post-quantum cryptography. Especially, quantum key distribution, as the adversary of quantum computing, is one of them.",
			"sees":	["Quantum key distribution", "DH", "RSA key exchange"],
			"url1": "https://en.wikipedia.org/wiki/Quantum_computing"
		},
		{
			"name":	"Rainbow table",
			"desc":	"A rainbow table is an advanced pre-computed table mapping between the texts and their hashed values. Unlike the pre-computed dictionary attack, a rainbow table is capable of cracking also the long passwords. \nRainbow table takes advantage of the chaining technique, trading a little more processing time for less storage, as compared to the pre-computed dictionary attack. One may calculate the rainbow tables by himself, or he can also buy the table from others. ^The defense against rainbow table is the use of salt, especially long salt. By adding salt to the password before hashing, even users using the same password gets different hashes. This means the attacker has to calculate one table for each salt, which becomes impossible the salt is long enough.",
			"sees":	["Dictionary attack", "Salt"],
			"url1":	"https://en.wikipedia.org/wiki/Rainbow_table"
		},
		{
			"name":	"Replay attack",
			"desc":	"#image$510$500$replayNotes#text$225$230$Replay attack or playback attack is a form of network attack where a valid message is repeated or delayed by people of evil intent. For example, a server requires its users to send the password (or a hash value of the password) at login. The attacker can secretly capture a message at the client's login, and then resend the message to the server at login attempt, pretending to be a legitimate user. This can happen even if the message is encrypted. After all, there is no requirement that the attacker has to be able to decrypt the message or understand what is inside, he/she just need to send the message as it was. ^There are some ways to thwart replay attack: \nOne can use the session id. This id is chosen by the server, changing unpredictably at each login attempt. As a result, if the attacker just resends the old authentication message, the session id for the new attempt will be different to session id used in the old message. \nOne can also use nonce together with MAC (Message authentication code). ^One can also use timestamp. The login message will contain a timestamp, for the estimated time when the message is sent. If the attacker resends the login in message, the server will detect the problem with time, and the authentication fails. To use timestamp, a time synchronization between the client and the server is needed. The authentication protocol Kerberos uses the timestamp against replay attack. ^One can also use a OTP (One-Time Password). The password expires at each login attempt. That means each login attempt requires a new password, making the old password and the old message useless for the authentication. \nIt's also possible to use CHAP (Challenge-Handshake Authentication Protocol). Similar to session id, servers using CHAP sends something random to the client for each authentication attempt. At the second authentication attempt, the random data sent (called the challenge) changes, and replay of the previous response message makes no use anymore.",
			"sees":	["Nonce", "Timestamp", "OTP", "Kerberos", "MITM"],
			"url1": "https://en.wikipedia.org/wiki/Replay_attack"
			
		},
		{
			"name":	"Rogue access point",
			"desc":	"Evil twin represent a fake Wi-Fi access point that is disguised as a legitimate one, while rogue access point includes all wireless access points not explicitly authorized by the administrator, whether for good or evil purposes. \nIt should be firstly known that, in places like the airport or the campus, the coverage of the Wi-Fi signal is much more than what a single Wi-Fi access point can provide. The organization actually sets up multiple wireless access points across the site, under the same SSID (briefly speaking, the network name). These access points under the same SSID will be merged in the list of networks available. ^#image$500$365$rogueAPNotes$370$260#text$220$150$When connecting to the wireless network, the client device will choose the access point with the best signal. Moreover, when the device is about to leave the coverage of the original access point, the connection will handover to a new access point, which has better signal, and this process is transparent to the user. ^The rogue access point exploit this functionality, and is configured similar to the legitimate one, and especially, with the same SSID and a stronger signal. With the help of a deauth attack, which disconnects the victims from the legitimate one, all the devices of the network in the area will switch to the rogue access point. \nThe fraudulent access point can be used to perform Man-In-The-Middle attack. In this way, the attacker can read any unencrypted data sent through the wireless network, tamper with the data, or even redirecting the victims to the shadow servers, without the victims' awareness. \nThe rogue access point is hard to trace, as the device can be shut down and the attack slip away immediately.",
			"sees":	["Deauth attack", "Rogue DHCP server", "Tip:cautious for free Wi-Fi", "Connected to rogue AP"],
			"url1":	"https://en.wikipedia.org/wiki/Rogue_access_point",
			"url2":	"https://www.juniper.net/documentation/en_US/junos-space-apps/network-director2.0/topics/concept/wireless-ssid-bssid-essid.html",
			"url3":	"https://en.wikipedia.org/wiki/Evil_twin_(wireless_networks)"
		},
		{
			"name":	"Rogue DHCP server",
			"desc":	"Rogue DHCP server is a DHCP server of a network not under the control of the network administrator. \nFirst of all, the DHCP server is one server in a network with automatically assigns IP addresses and other configurations (e.g. DNS server and default gateway) for the devices connected to the network. A rogue DHCP server, especially one created by people of evil intention, can get the client experience problems with network access. Moreover, attackers would use a rogue DHCP server to set the default gateway to the machine under his control. An attacker can set up a rogue DHCP server on the rogue access point. This combo will make the attack more successful. ^The defense on rogue DHCP server can be provided by some intrusion detection systems or some multiplayer switch, but the most common approach is through the use of a DHCP snooping, which drops DHCP messages from untrusted DHCP servers.",
			"sees":	["Rogue access point", "DHCP hijacked", "DHCP snooping"],
			"url1":	"https://en.wikipedia.org/wiki/Rogue_DHCP"
		},
		{
			"name":	"Rogue DNS server",
			"desc":	"A DNS (Domain Name System) is a server which translates domain names (e.g. www.google.com), which is human readable, into its corresponding IP address e.g. 1.2.3.4, which is machine readable. Instead of the domain names, the network devices actually use always the IP addresses. A rogue DNS server, however, may \"translate\" in a wrong way, bringing confusion or even hazard to computer systems. For example, the rogue DNS server may translate the domain name of paypal.com into the IP address of the attacker's shadow server (a fake server disguising as a legitimate one). In this way, the client may insert username and password, and even pay for purchases on the shadow server. ^#image$510$380$dnsHijackingNotes#text$220$170$Attack on DNS service is quite difficult for the client to recognize, as nothing is wrong with the domain name. Because of this property, other attacks surpassing same-origin policy like XSS are effective. ^To defend rogue DNS server, one can manually set all the DNS entries on all the machines. This approach, however, does not scale, as the work increased dramatically with the size of the network. \nAnother approach is to use DNSSEC. With certificates used, the fake DNS answers will be easily detected.",
			"sees":	["DHCP hijacked", "DNS hijacked", "Manual DNS setting", "DNSSEC", "DNS cache poisoning"],
			"url1":	"https://en.wikipedia.org/wiki/DNS_hijacking"
		},
		{
			"name":	"Shadow server",
			"desc":	"The shadow server is a fraudulent server in place of a real one. The client may be fooled by its similarity to the look of a real one. The purpose of a shadow server is, however, to lure the client to insert his/her important and secret data like the password.",
			"sees":	["Phishing"]
		},
		{
			"name":	"Sniffing attack",
			"desc":	"Sniffing attack or sniffer attack represent the behavior of intercepting data traffic traveling on the network with the use of a sniffer. If the data is not in any sense encrypted, the data can be read and understood by the sniffer. The sniffing attack will grant the attacker some information that he/she is not supposed to know, whether it's the detailed traffic information or a user's password. Sniffing attack is closely related to the term of wiretapping or eavesdropping. \nAs one kind of passive attack, sniffing attack does not actively tamper with the systems or the related parties. Thereby, it's not easy to be detected. ^To fight against sniffing attack, there are two possibilities: \n1. (deprecated) To keep the attacker off the communication channel. If there's enough physical separation between the attacker and the channel, the information is secure. \n2. To encrypt the information transmitted over the channel. The attack can obtain access to the data, but without the power to decrypt the message, it's just a piece of scrambled characters. N.B. One-way hashing is hard to unhash. Therefore, hashed data also provides somewhat a similar effect as encryption.",
			"sees":	["Promiscuous mode", "Encrypted", "Password hashed", "MITM", "OTP"],
			"url1":	"https://en.wikipedia.org/wiki/Sniffing_attack"
		},
		{
			"name":	"Spam email",
			"desc":	"Email spam, or say junk email, is one of the major sources of phishing messages. Attachments or external links which looks quite similar to legitimate websites are put in spam emails. However, the attachment usually contains viruses, and the link actually leads to some phishing website, or websites with malware, or even the link itself could be crafted in order to perform CSRF attack. The majority of spam emails are sent by botnet, where the computers are remotely controlled by the crackers. \nDefensive approaches of spam emails include DNSBL (DNS-based blackhole list), spamtraps, greylisting, nolisting and others.",
			"sees":	["Greylisting", "Botnet machines", "CSRF"],
			"url1":	"https://en.wikipedia.org/wiki/Email_spam"
		},
		{
			"name":	"Spear phishing",
			"desc":	"Spear phishing is a version of phishing where the attacker targets only the specific person or organization. While the range of potential victim greatly shrunk, the attacker can exploit more personal information related to the target, increasing the success probability to a large extent. For example, \"Are you Mr XXX, with SSN XXXXXX? You booked flight departing tomorrow at XX:XX is canceled.\" As can be seen, a spear phishing needs a longer preparation time than normal phishing, and requires the collection of personal information. As a result, spear phishing usually follow a successful breach of some websites where the target victim has left his/her trace there. ^Crackers who have compromised the server would also sell bulks of collected personal information in low price on the deep web, so that who hacked the web and who launched spear phishing could be two different persons.",
			"sees":	["Phishing", "Whaling"],
			"url1":	"https://en.wikipedia.org/wiki/Phishing"
		},
		{
			"name":	"Whaling",
			"desc":	"Whaling is a version of spear phishing, where the target victim is of high profit and more value (e.g. CEOs). If the attacker succeeds in an action of whaling, he/she is expected to earn much more than just a normal spear phishing.",
			"sees":	["Phishing", "Spear phishing"],
			"url1": "https://en.wikipedia.org/wiki/Phishing"
		},
		{
			"name":	"XSS",
			"desc":	"Cross-site scripting is a computer system vulnerability that is usually found in web applications. The attacker can use XSS to inject client-side scripts into webpages, so that they will run on the machines of other users. In this manner, access controls like same-origin policy can be bypassed. It's one of the greatest vulnerability for web applications. Different from CSRF, which exploits the server's trust in the client browser, XSS exploits the client's trust in the server. ^The injection techniques like HTTP header injection and the SQL injection are closely related to XSS. The defensive approach of them is generally the sanitization of the related tags. \nXSS can be used to steal cookies from the victim client. Counter measures on this include binding cookie to IP or set the HTTP-only flag in the cookie, making the cookie intangible for the scripts. ^#image$550$280$xssNotes",
			"sees":	["CSRF", "Same-Origin policy", "Cookie bind to IP", "HTTP-only cookie", "Secure cookie"],
			"url1": "https://en.wikipedia.org/wiki/Cross-site_scripting"
		},
		{
			"name":	"Zero-day attack",
			"desc":	"A zero-day or 0-day vulnerability represents the vulnerability that is newly found by the attacker, and unknown to those who would mitigate the vulnerability. When the vulnerability is not mitigated, the attacker can fully exploit it for the attacker, with little or no defense in the way. The exploit targeting zero-day vulnerability is called a zero-day exploit or zero-day attack. ^#text$220$200$The turn \"Day zero\" represent the day when the people who would mitigate the vulnerability learn of it. Starting from, day zero, they would begin to make patches or suggest workarounds, so that the severity of the vulnerability begins to drop. However, zero-day vulnerability witnesses no defense of any kind on it, and it's of great threat. #image$560$400$zeroDayNotes$700$120",
			"url1":	"https://en.wikipedia.org/wiki/Zero-day_(computing)"
		}
	],
	"defDesc": "Defensive acts are performed by the defender. Nearly all the defensive acts enforce positive buffs on the character. The positive buffs then, usually act as hurdles for the intruder to launch attacks on the vulnerabilities. \nSome defensive buffs have upkeep, consuming resource each defender's round. This implies the applications consumes non-trivial computational power or adds non-trivial complexity to the users. However, it's usually better to sacrifice some computational power or simplicity for a higher level of security. Contrarily, some other buffs could contribute to resource gain, providing resource each defender's round. This indicates that the applications will provide computational power or facilitate the users.",
	"defensive":
	[
		{
			"name":	"3DES",
			"desc":	"3DES or Triple DES is a symmetric-key block cipher that uses DES algorithm three times to each block. It could use two different DES keys: encryption with key1, decryption with key2, and then encryption with key1. Or it could use three different DES keys: encryption with key1, decryption with key2, and then encryption with key3. It's developed to cope with the problem of DES being unable to stand the attack of modern computers. No one uses Double DES. This is because the attacker with both plaintext and ciphertext in hands, can crack Double DES from both sizes (DES encryption of the plaintext and DES decryption of the ciphertext), and of the Meet-In-The-Middle attack. As a result, Double DES, as compared to DES, doubles the encryption time, but only increase the security by one bit (rather than 56bits).",
			"sees":	["DES", "Symmetric cryptography"]
		},
		{
			"name": "ARP firewall",
			"desc": "An ARP firewall is a software that detects ARP cache poisoning. It's based on some form of certification or cross-checks. It can be installed on each individual host or it can be integrated into Ethernet switches or other equipment.",
			"sees":	["ARP cache poisoning"]
		},
		{
			"name":	"Asymmetric cryptography",
			"desc":	"Asymmetric cryptography or public-key cryptography is a way of cryptography using a pair of two keys: a public key and a private key. The public key is to be distributed as widely as possible, while the private key has to be kept secret. ^There is a relationship between these two keys: the message encrypted with the public key can and can only be decrypted with the private key; the messages encrypted with the private key can and can only be decrypted with the public key. As a result, message encrypted with the public key becomes a secret: only the private key holder can read (this provides secrecy). The message that can be decrypted with the public key is supposed to be encrypted with the related private key: only the private key holder can do this (this provides authentication and non-repudiation). ^Even with same key length, Asymmetric cryptography is far slower than symmetric cryptography, as a consequence, it's not used to encrypt the whole message, but only an important part related to it. For example, for secrecy, the message is still encrypted with a symmetric key, but the key is sent, encrypted with the receiver's public key (asymmetric key). And for authentication, instead of the whole message, only the hash value of the message (which is  much smaller) is encrypted with the sender's private key.",
			"sees":	["Key exchange", "Symmetric cryptography", "RSA key exchange", "DH", "MQV"],
			"url1":	"https://en.wikipedia.org/wiki/Public-key_cryptography"
		},
		{
			"name": "CAPTCHA",
			"desc": "#image$480$470$CAPTCHANotes$350$200#text$220$230$CAPTCHA stands for Completely Automated Public Turing test to tell Computers and Humans Apart. It's a challenge-response test to detect if the one who made a request is a human or just a script-driven machine. \nThe first version of CAPTCHA requires the users to recognize and insert the characters from the distorted image. Because Turing test is about how a person can tell a person and a computer apart, while CAPTCHA does the same, but by a computer, CAPTCHA is sometimes called as a reverse Turing test. ^The core part of CAPTCHA (and of Turing test) is to find something that human can do and computer or AI cannot. Basic image recognition or speech recognition (if the CAPTCHA uses dictation instead) are already solved by in the field of AI, and one can only tell human and computer apart by engaging more difficult activities. That's why users are challenged at recognizing distorted words, solving a mathematical calculation, or select a particular part in the image. Contrarily, there are also some people, especially the disabled, who blame CAPTCHA for making the authentication process more difficult and slower. ^For the moment, CAPTCHA is still an excellent approach to defend from brute-force attack and some Application-level Denial-of-Service attack. Nevertheless, when the strong AI or even hyper AI really comes to life, it's hard to tell if CAPTCHA still functions.",
			"url1": "https://en.wikipedia.org/wiki/CAPTCHA"
		},
		{
			"name":	"CDN",
			"desc":	"#image$500$410$cdnNotes$400$190#text$220$190$Content Delivering Network or Content Distribution Network is a distributed network of proxy servers and data centers. In a CDN multiple servers are grouped together to serve under the same URL. The workload is distributed among the servers, making the server group less likely to overload. It also increases the server capacity and decreases the chance to fall for DoS attack.",
			"url1": "https://en.wikipedia.org/wiki/Content_delivery_network"
		},
		{
			"name":	"Encrypt with Enigma",
			"desc":	"#image$800$80$enigmaLogo$200$88#image$800$350$enigmaNotes#text$220$270$The Enigma machines were a series of electro-mechanical rotor cipher machines developed and used in the early and mid-20th century for the encryption of commercial, diplomatic and military purposes. It was invented by the German engineer Arthur Scherbius at the end of the World War 1, and is more widely used by Nazi Germany before and during the World War 2. Especially, the German military model Enigma machine, with also a plugboard, is the much more complex than other versions of the machine.$520 ^In 1932, a Polish mathematician and cryptanalyst Marian Rejewski, aided by Jerzy Różycki and Henryk Zygalski, has taken advantage of the operator mistakes and the misconfiguration of German military Enigma machine, to break the Enigma machine. They also built an electro-mechanical machine referred to as \"Bomba\" to help the search for the encryption key. ^In 1938, the Germans increased the complexity of Enigma machine, change the number of rotors of the machine from 3 to 5, increasing the time to crack the key ten times, making the Polish cryptanalyst not anymore able to crack the code.",
			"sees":	["Bombe", "Encrypted"],
			"url1":	"https://en.wikipedia.org/wiki/Enigma_machine",
			"url2":	"https://en.wikipedia.org/wiki/Cryptanalysis_of_the_Enigma"
		},
		{
			"name":	"Cookie bind to IP",
			"desc":	"In face of cross-site scripting, the server can bind the client cookie to the IP address of the last access. This makes the attacker with another IP address, cannot use the cookie stolen from a legitimate client. However, if the attacker and the victim share the same global IP address (e.g. they are both under the same NAT), this approach makes no use. IP spoofing is also a possible approach against this. It's also possible that some clients experience the change of the IP address during a browsing session. This technique will also bring them a hard time.",
			"sees":	["XSS", "IP spoofing"],
			"url1": "https://en.wikipedia.org/wiki/Session_hijacking"
		},
		{
			"name":	"DES",
			"desc":	"Data Encryption Standard is a symmetric-key algorithm to encrypt electronic data. It is an algorithm for the block cipher with the block size of 64bits. It had a great impact on modern cryptography. But, due to its short key length (56bits), it is not anymore able to stand the attack of the current computers, and it has been proven obsolete. Triple DES, as another algorithm which applies DES encryption three times, is one of the successors of DES. Whereas, AES (Advanced Encryption Standard), as an independent algorithm, is more widely considered the successor of DES.",
			"sees":	["3DES", "Symmetric cryptography"],
			"url1":	"https://en.wikipedia.org/wiki/Data_Encryption_Standard"
		},
		{
			"name":	"DH",
			"desc":	"Diffie–Hellman key exchange is a method to securely exchange encryption key between two parties over a public channel. DH is one of the first public-key protocols, and one of the first public key exchange algorithm implemented. \nThe encryption of messages between two parties requires the safe exchange of encryption keys first. The key exchange was done out-of-band, with a courier taking the key with him. DH, however, requires no prior knowledge between the two parties, and allows them to together establish an encryption key over an insecure network. ^#image$520$270$DHNotes$400$450^Nevertheless, DH is susceptible to MITM (Man-In-The-Middle) attack, as the attacker can establish two connections performing two DH exchanges with both parties, whereas they are unaware of the presence of the attacker.",
			"sees":	["MQV", "MITM"],
			"url1": "https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange"
		},
		{
			"name":	"DHCP snooping",
			"desc":	"DHCP snooping is a group of defensive techniques on the security of DHCP infrastructure. DHCP can be configured to block unfavorable DHCP messages. It also has a database of \"bindings\" for hosts with DHCP transaction complete, which is useful for other security or accounting purposes. \nDHCP snooping is counters the use of rogue DHCP server.",
			"sees":	["Rogue DHCP server"],
			"url1":	"https://en.wikipedia.org/wiki/DHCP_snooping"
		},
		{
			"name":	"DNSSEC",
			"desc":	"Domain Name System Security Extensions is a suite of IETF specifications for protecting DNS protocol from attacks. It extends DNS protocol, providing the clients with message authentication, authenticated denial of existence and data integrity of the DNS responses. It will greatly thwart the attacks on DNS services.",
			"sees":	["Rogue DNS server", "DNS cache poisoning"],
			"url1": "https://en.wikipedia.org/wiki/Domain_Name_System_Security_Extensions"
			
		},
		{
			"name":	"Greylisting",
			"desc":	"Greylisting is one of the methods to defend from spam emails. A MTA (Message Transfer Agent) applying greylisting will firstly temporarily reject all emails from unknown sender. If the mail is sent from legitimate mail server, the server will resend the email in a later time. When enough time has elapsed since the first rejection, this MTA will accept the retransmitted email. This technique exploits the fact that, the spammers have little time, and many mass email tools used by the spammers do not queue or resend email when they encountering errors. \nHowever, this method also gets its shortcoming: legitimate emails (called as \"ham\") are refused at their first delivery, just like spam.",
			"sees":	["Spam email"],
			"url1":	"https://en.wikipedia.org/wiki/Greylisting"
		},
		{
			"name":	"Hash algorithm",
			"desc":	"a Hash function is any function that can map data of arbitrary size to data of fixed size. It's used in the field of computer software for quicker lookup for the data. But in the field of cryptography, it's used for easy conversion from the input data to the output data (called digest, hash values or hashes), while reversely it's extremely difficult (called as a one-way hash). The ideal cryptographic hash function has the following properties: \nThe same input always results in the same output. \nThe calculation of a hash value is always quick. \nIt's impossible to calculate the original message from the hash value, except for the brute-force search. ^Any single change in the original message resulting in great, unpredictable change in its hash value, leaving no clue between the old and the new hash values. \nIt's infeasible to find two different messages with the same hash value. The cryptographic hash function is widely used in the field of information security, especially for the purpose of authentication.",
			"sees":	["Password hashed"],
			"url1":	"https://en.wikipedia.org/wiki/Cryptographic_hash_function"
			
		},
		{
			"name":	"HTTP-only cookie",
			"desc":	"An HTTP-only cookie cannot accessed by client side APIs, especially, Javascript. This restricts the cookie theft via XSS. However, attacks like XST (Cross-Site Tracing) or CSRF (Cross-Site Request Forgery) are still possible.",
			"sees":	["XSS", "Secure cookies"],
			"url1": "https://en.wikipedia.org/wiki/HTTP_cookie#HttpOnly_cookie"
		},
		{
			"name":	"Kerberos",
			"desc":	"Kerberos is an authentication protocol in the computer network, based on the ticket. It provides multi-domain SSO (Single Sign-On). It's built on symmetric cryptography, and requires the involvement of a trusted third party. It uses timestamp for the login attempts. Thereby, a replay attack is infeasible against Kerberos. However, the use of timestamp indicates that, it's necessary to do clock synchronization among the parties. ^#image$500$280$kerberosNotes",
			"sees":	["Password manager", "Timestamp", "Replay attack"],
			"url1":	"https://en.wikipedia.org/wiki/Kerberos_(protocol)",
			"url2":	"https://en.wikipedia.org/wiki/Single_sign-on"
		},
		{
			"name":	"Manual DNS setting",
			"desc":	"A rogue DNS server in the network will spread out fake DNS response messages to achieve DNS hijacking. By manually setting the IP address of a DNS server, the computer can turn blind to fake response messages sent from other hosts. But be Aware, IP address can be spoofed.",
			"sees":	["Rogue DNS server"],
			"url1":	"https://en.wikipedia.org/wiki/DNS_hijacking"
		},
		{
			"name":	"MFA",
			"desc":	"Multi-Factor Authentication is a method of confirming a user's claimed identity only after authenticated by two or more factors. The multiple factors should be of different kinds, taken from something they know, something they have and something they are. Important services like banking services usually apply MFA (2-factors). e.g. ATM requires both the credit card (something they have) and the password (something they know) before any transactions. Resetting account password requires the knowledge of old password (something they know) and the message sent to the bonded email or mobile phone (something they have).",
			"url1":	"https://en.wikipedia.org/wiki/Multi-factor_authentication"
		},
		{
			"name":	"MQV",
			"desc":	"Menezes–Qu–Vanstone is an authenticated protocol for key exchange based on Diffie-Hellman. With the use of certificates, it adds also the authentication to Diffie-Hellman, protecting it from Man-In-The-Middle attack.",
			"sees":	["DH","RSA key exchange"],
			"url1": "https://en.wikipedia.org/wiki/MQV"
		},
		{
			"name":	"Nonce",
			"desc":	"Nonce is an arbitrary number that can be used only once. It's a random or pseudo-random number generated for authentication purposes, so that the old number becomes invalid for new authentication. Because of this, the replay attack becomes impossible. Nonce is also used for initialization vector and cryptographic hash functions. It's closely related to the term of salt",
			"sees":	["Replay attack", "Salt"],
			"url1":	"https://en.wikipedia.org/wiki/Cryptographic_nonce"
		},
		{
			"name":	"OTP",
			"desc":	"One-Time Password is a password that is valid only for a single login session or transaction. Due to the fact that each password is useful only for one transaction, it provides a great defense against replay attack and sniffing attack. One-Time Password can be sent through mobile phones, generated from cryptographic hardware tokens, or hard copied. The main problem of one-time password is that it is consumable. Therefore, one-time passwords are still used only for crucial actions, while other day-to-day authentication attempts use other methods.",
			"sees":	["Sniffing attack", "Replay attack"],
			"url1":	"https://en.wikipedia.org/wiki/One-time_password"
		},
		{
			"name":	"Password-based authentication",
			"desc":	"PAP (Password Authentication Protocol) is an authentication protocol based on the password, used by Point to Point Protocol (PPP) for validation. It's the most basic and commonly used authentication protocol, and almost all network operating system remote servers support PAP. However, it's a weak authentication scheme, in the sense that it's susceptive to attacks.",
			"url1":	"https://en.wikipedia.org/wiki/Password_Authentication_Protocol"
		},
		{
			"name":	"Password error delay",
			"desc":	"In order to avoid locking the user account down, the authentication system can enforces a time delay for consecutive login attempt when the first attempt fails. The attackers always have scare time, and it's really inefficient for them to wait for the timeout and try the next password.",
			"sees":	["Password error limit", "Brute-force attack"]
		},
		{
			"name":	"Password error limit",
			"desc":	"Every password is no more than just a combination of characters of a certain length. By constantly testing all possible combinations, the password, especially the short ones, could be revealed. The behavior or repetitively test on all possible combinations is called a brute-force attack. In order to discourage brute-force attack, on the repetitive trial is limited. One possibility is to limit the number of failures in login attempts, before the system locks down the account. This is used for example by the sim card, as some failures to insert the correct PIN leads to the lockdown of the card, when the user has to use the PUK to unlock it. ^Nevertheless, while an attacker is not able to constantly try the password, he/she can deliberately insert wrong passwords, to lock the account of the user down. This makes the user unable to access his/her account, resulting in a denial-of-service. \nThe solution to this is never lock the account down. For example, the authentication system can enforces a time delay for consecutive login attempt if the first attempt fails.",
			"sees":	["Password DoS", "Password error delay", "Brute-force attack"]
		},
		{
			"name":	"Password hashed",
			"desc":	"Although the (cryptographic) hashing function is more widely used for authentication purpose, it still provides a kind of obfuscation similar to encryption. In the old days when the passwords of the clients are stored in the server in clear text, the data leakage on the server means the usernames and the passwords are all revealed to the intruder. Things will be even worse if the clients have used the same password across different servers, meaning that the intruder has obtained credential for multiple services. ^One way hash can transfer the password into another piece of text, which has no notable clue to the password. Except for a brute-force search, there is no algorithm that can find the original password out of its hashed value. For more details, see the entry \"Hash algorithm\". \nHere is how it goes: instead of storing the client password itself, the server stores only the hash of the password. At each login attempt, the inserted password is also hashed, before being compared to the value stored. In this way, even if the server's defense is breached, the intruder still will not obtain the password, but only the hash value of it. ^It the intruder use the hash value for login, the server, or any other server will hash it again, converting it to another value, and the login attempt fails. Moreover, if two servers use two different hash algorithms, or the same hash algorithm with different block size (assuming a block cipher), the hashed values differ. However, there are offensive techniques to thwart the hashing of the password. Besides the most basic and slowest brute-force attack, which tests all possible passwords and their corresponding hash values, there are also dictionary attack and, its improved version, rainbow table attack.",
			"sees":	["Hash algorithm", "Brute-force attack", "Dictionary attack", "Rainbow table"]
		},
		{
			"name":	"Password manager",
			"desc":	"Password manager represents the software which assists the user in generating and retrieving complex passwords, with the possibility to store the passwords in encrypted database or to calculate them on demand. The password manager can also autofill the password for the user, saving their effort to remember or insert the password. A password manager is a technique used for the purpose of SSO (Single Sign On).",
			"sees":	["Kerberos"],
			"url1":	"https://en.wikipedia.org/wiki/Password_manager",
			"url2":	"https://en.wikipedia.org/wiki/Single_sign-on"
		},
		{
			"name":	"PKI",
			"desc":	"#text$220$180$A Public Key Infrastructure is a set of roles, policies, and procedures needed to create, manage, distribute, use, store, and revoke digital certificates and manage public-key encryption. It binds the public keys to respective identities, through the registration and issuance of the certificate at and by the certificate authority.         key point: certificates#image$490$430$pkiNotes$480$300",
			"url1":	"https://en.wikipedia.org/wiki/Public_key_infrastructure"
		},
		{
			"name":	"Quantum key distribution",
			"desc":	"Quantum cryptography is the science of using the quantum mechanics for cryptographic purposes. One of the most known example of quantum cryptography is quantum key distribution. It exploits the quantum mechanics property that, it's impossible to copy any data encoded in a quantum state without changing the quantum state. Many of the current cryptographic methods are breakable with the incoming quantum computers, but quantum key distribution is one of the possible solutions for the future.",
			"sees":	["Quantum computing"],
			"url1":	"https://en.wikipedia.org/wiki/Quantum_cryptography"
		},
		{
			"name":	"RSA key exchange",
			"desc":	"RSA (Rivest-Shamir-Adleman) is one of the first public-key system, and is widely used for secure data transmission. RSA key exchange especially, is the use of RSA algorithm for the key exchange between two parties. Due to the property of data integrity, authentication, and privacy provided by RSA encryption, one party can self-generate an encryption key, and send the key to the other party, without the fear the key will be read or manipulated by others.",
			"sees":	["MQV", "Asymmetric cryptography"],
			"url1":	"https://en.wikipedia.org/wiki/RSA_(cryptosystem)"
		},
		{
			"name":	"Salt",
			"desc":	"Salt is a random data to be added to the original text (e.g. password or passphrase) before hashing operation. It's closely related to the term of nonce. It's used against dictionary attack and pre-computed rainbow table attack. \nThe user password was stored in clear text in the server. Later on people stores only the hash of the password, in order to avoid password leakage from the server. Then, in face of the dictionary attack and the pre-computed rainbow table attack, salt is also added to the password before they are together hashed. The server then stores the salt-added-hash together with the salt used. ^The salt should be generated randomly every time, and should be long enough. With random salt, even if users used the same password, their salt-add password differs, and their final hash value differs. Also, the intruder has to generate one rainbow table for each random salt, which becomes greatly challenging (more challenging if the salt is long). With long salt, even if the password was short, the salt-add password can still be of size big enough to frustrates crackers.",
			"sees":	["Dictionary attack", "Rainbow table", "Nonce"],
			"url1":	"https://en.wikipedia.org/wiki/Salt_(cryptography)"
		},
		{
			"name":	"Secure cookie",
			"desc":	"Secure cookie is a type of cookie that only transmits over encrypted HTTP connections. With the Secure attribute set, the browser will not send the cookie over non-secure connections. In practice, also the HttpOnly and SameSite attributes are needed to fully protect the cookie from being exposed to evil hands. HttpOnly prevents the cookie to be accessed by Javascript, and SameSite prevents the cookie to be sent to a different domain. \nSecure cookie is one of the techniques that fight session hijacking.",
			"sees":	["XSS", "HTTP-only cookie"],
			"url1":	"https://en.wikipedia.org/wiki/HTTP_cookie#Secure_cookie",
			"url2":	"https://en.wikipedia.org/wiki/Secure_cookie"
		},
		{
			"name":	"Symmetric cryptography",
			"desc":	"Symmetric cryptography or private-key cryptography is a way of cryptography using the same key for both encryption (at sender) and decryption (at receiver). Symmetric-key encryption use either block ciphers or stream ciphers. The block cipher encrypts and decrypts messages in blocks of fixed size. Padding or methods like ciphertext stealing are usually used to make the length plaintext a multiple of block size. The stream cipher, however, encrypts or decrypts messages as the bits flow, and has no requirement on the length of the plaintext. ^Symmetric cryptography is based on the encryption/decryption key exchanged between two parties (known as shared secret) and unknown to others. As a consequence, the generation and distribution of the shared secret is an important issue. Except for out-of-band approaches, Diffie–Hellman and other public key protocol like RSA can be used for the key exchange.",
			"sees":	["Key exchange", "Asymmetric cryptography", "DES", "3DES"],
			"url1":	"https://en.wikipedia.org/wiki/Symmetric-key_algorithm"
		},
		
		{
			"name":	"Tip:cautious for free Wi-Fi",
			"desc":	"Attackers may set up free Wi-Fi for other to connect to. While it seems a generous act, the real intention of the attacker is to perform a Man-In-The-Middle attack. For more details, see the entry \"Rogue access point\".",
			"sees":	["Rogue access point"]
		},
		{
			"name":	"Tip:open no unauthorized link",
			"desc":	"Links sent from unknown sources are doubtable. It may lead to a shadow server, which looks and feels like a legitimate one, but will steal sensitive data from you. There could be also some techniques to obfuscate the query strings in the link, making it hard to be recognized. The link may also lead to some sites which distributes malware. Just by a single click on the link, one may have already been CSRF attacked.",
			"sees":	["CSRF", "Spam email"]
		}
	]
},
"buffs": 
{
	"buffDesc":	"Buffs are the lasting effects of the offensive or defensive acts performed by the characters. There are positive acts, which enhance the ability of the character, or provide defense against attacks. There are also negative buffs, which are usually enforced on the defender by the intruder. Negative buffs indicate the states of how the intruders lure the victims into their traps. \nSome buffs have infinite length, but some others have finite length. If a buff's remaining length decreses to zero, the buff, together with its effects will vanish. ^In general, a defender is supposed to put on as many (positive) buffs as possible, to gurantee better security. An intruder, however, would like to remove those positive buffs (if possible) from the defender, and enforces some negative buffs on the defender, so as to successfully deal damage to the assets.",
	"buffs":
	[
		{
			"name":	"503 Server Unavailable",
			"desc": "503 Server Unavailable. The server is overburdened with requests. Possible reason:\n - The server's computation or communication power does not match the need of the clients.\n - Because of some events (e.g. a festival or a promotion) many clients send requests within a short time period.\n - The server is under DoS attack, where a huge number of requests are fake requests aiming at exhaust the computational or communicational power of the server."
		},
		{
			"name":	"Confidential message divulged",
			"desc":	"German military movement and other important and secret information are revealed to the Allies.",
			"sees":	["Credential compromised"]
		},
		{
			"name":	"Connected to rogue AP",
			"desc":	"The victim is connected to a rogue AP (access point). If the rogue access point has a rogue DHCP service installed, the victim could experience DHCP hijacking.",
			"sees":	["Rogue access point"]
		},
		{
			"name":	"Credential compromised",
			"desc":	"The server/client's important data like username and password are compromised. The intruder obtains these data, and he can sell these data in the deep web, or even use the important login credential for more devastating things (e.g. deleting the whole database, exporting more client secret information, tampering with account credits).",
			"sees":	["Confidential message divulged"]
		},
		{
			"name": "Denial of service attacked",
			"desc":	"The target server is under denial of service attack. The server is greatly loaded with countless request, and it may fail to serve the legitimate users.",
			"sees":	["DoS", "DDoS", "Password DoS"]
		},
		{
			"name": "DHCP hijacked",
			"desc":	"The victim's device accept the configuration of a rogue DHCP server. Crucial parameters like default gateway and DNS server are set by the attacker. Because of the setting for the default gateway, the attacker is already in a Man-In-The-Middle state. Because of the setting for the DNS server, the attacker can set up a rogue DNS server and perform the attack of DNS hijacking. \nFor details, see Rogue DHCP server.",
			"sees":	["Rogue DHCP server"],
			"url1":	"https://en.wikipedia.org/wiki/Rogue_DHCP"
		},
		{
			"name":	"DNS hijacked",
			"desc":	"See Rogue DNS server",
			"sees":	["Rogue DNS server"],
			"url1":	"https://en.wikipedia.org/wiki/DNS_hijacking"
		},
		{
			"name":	"Encrypted",
			"desc":	"The data transferred over the Internet is encrypted with a symmetric key shared by the sender and the receiver. Sniffing attack alone will not compromise the secrecy. \nThe process to create encryption key known by and only by the two parties is called key exchange. For more information, please refer to \"Key exchange\".",
			"sees":	["Key exchange", "Symmetric cryptography", "Encrypt with Enigma"]
		},
		{
			"name":	"IP spoofed",
			"desc":	"See IP spoofing",
			"sees":	["IP spoofing"],
			"url1":	"https://en.wikipedia.org/wiki/IP_address_spoofing"
		},
		{
			"name":	"Key exchange",
			"desc": "Key exchange represent the process to create a shared secret known by and only by two parties. Symmetric encryption is then used, taking the shared secret, or a variation derived from it as encryption key. No other people will be able to understand the encrypted messages, except that they crack the encryption or hack on the process of key exchange. \nTo securely exchange the key, people used to adopt out-of-band approaches like delivering the key in person. The creation of key exchange protocols like Diffie-Hellman key exchange totally changed this. With these protocols, the shared secret can be transmitted over insecure channels, while still not divulged to the third person. ^Symmetric keys are delivered by key exchange to encrypt the messages, but asymmetric keys are not used in this way. This is majorly because asymmetric encryption is much slower than symmetric encryption. Encrypting and decrypting the whole message takes up too much time. Nevertheless, Asymmetric cryptography, or better say, public-key cryptography turns out quite useful in the process of key exchange. For deatils, see \"Asymmetric cryptography\".",
			"sees":	["Encrypted", "Symmetric cryptography", "Asymmetric cryptography"]
		},
		{
			"name":	"Offline",
			"desc": "The victim is kicked offline by Wi-fi deauth attack, or by a Zero-day attack. The character has to reconnect, and can do nothing for the moment.",
			"sees":	["Deauth attack", "Zero-day attack"]
		},
		{
			"name":	"Same-Origin policy",
			"desc": "Same-Origin policy is an important concept for the security model of the web applications. Under this policy, the scripts from one web page can access data in the second page only if the two pages have the same origin. This policy protects the content of the page from being accessed by malicious codes from other pages. This policy is especially crucial for those web applications that use (client side) cookies as authentication tokens, as any tampering of the cookies from other websites could result in authentication breach. Same-Origin policy mainly applies to scripts, while data access through HTML tags is not restricted (except for the font). \nNevertheless, some offensive techniques like XSS and CSRF are there to bypass same-origin policy.",
			"sees":	["XSS", "CSRF"],
			"url1": "https://en.wikipedia.org/wiki/Same-origin_policy"
		},
		{
			"name":	"Shared channel",
			"desc": "Both characters have access to the communication channel to the other. Any unencrypted messages can be directly sniffed by the other one."
		},
		{
			"name":	"Wi-Fi channel",
			"desc": "Both characters are connected to the same Wi-Fi network. Wi-Fi based attacks like deauth attack or rogue access point can be launched against the victim.",
			"sees":	["Deauth attack", "Rogue access point"]
		}
	]
}
}
